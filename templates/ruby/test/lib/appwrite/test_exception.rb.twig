require 'test/unit'
require_relative '../../../lib/{{ spec.title | caseSnake }}/exception' # Ensure this path is correct

class ErrorTypeTest < Test::Unit::TestCase

    def test_error_type_values
        assert_equal('general_mock', ErrorType::GeneralMock)
        assert_equal('general_argument_invalid', ErrorType::GeneralArgumentInvalid)
        assert_equal('general_query_limit_exceeded', ErrorType::GeneralQueryLimitExceeded)
        assert_equal('general_query_invalid', ErrorType::GeneralQueryInvalid)
        assert_equal('general_cursor_not_found', ErrorType::GeneralCursorNotFound)
        assert_equal('user_password_mismatch', ErrorType::UserPasswordMismatch)
        assert_equal('password_recently_used', ErrorType::PasswordRecentlyUsed)
        assert_equal('password_personal_data', ErrorType::PasswordPersonalData)
        assert_equal('user_phone_not_found', ErrorType::UserPhoneNotFound)
        assert_equal('user_missing_id', ErrorType::UserMissingId)
        assert_equal('user_oauth2_bad_request', ErrorType::UserOauth2BadRequest)
        assert_equal('storage_device_not_found', ErrorType::StorageDeviceNotFound)
        assert_equal('storage_file_empty', ErrorType::StorageFileEmpty)
        assert_equal('storage_file_type_unsupported', ErrorType::StorageFileTypeUnsupported)
        assert_equal('storage_invalid_file_size', ErrorType::StorageInvalidFileSize)
        assert_equal('storage_invalid_content_range', ErrorType::StorageInvalidContentRange)
        assert_equal('storage_invalid_appwrite_id', ErrorType::StorageInvalidAppwriteId)
        assert_equal('general_provider_failure', ErrorType::GeneralProviderFailure)
        assert_equal('build_not_ready', ErrorType::BuildNotReady)
        assert_equal('build_in_progress', ErrorType::BuildInProgress)
        assert_equal('collection_limit_exceeded', ErrorType::CollectionLimitExceeded)
        assert_equal('document_invalid_structure', ErrorType::DocumentInvalidStructure)
        assert_equal('document_missing_data', ErrorType::DocumentMissingData)
        assert_equal('document_missing_payload', ErrorType::DocumentMissingPayload)
        assert_equal('attribute_unknown', ErrorType::AttributeUnknown)
        assert_equal('attribute_not_available', ErrorType::AttributeNotAvailable)
        assert_equal('attribute_format_unsupported', ErrorType::AttributeFormatUnsupported)
        assert_equal('attribute_default_unsupported', ErrorType::AttributeDefaultUnsupported)
        assert_equal('attribute_limit_exceeded', ErrorType::AttributeLimitExceeded)
        assert_equal('attribute_value_invalid', ErrorType::AttributeValueInvalid)
        assert_equal('attribute_type_invalid', ErrorType::AttributeTypeInvalid)
        assert_equal('index_limit_exceeded', ErrorType::IndexLimitExceeded)
        assert_equal('index_invalid', ErrorType::IndexInvalid)
        assert_equal('project_unknown', ErrorType::ProjectUnknown)
        assert_equal('project_invalid_success_url', ErrorType::ProjectInvalidSuccessUrl)
        assert_equal('project_invalid_failure_url', ErrorType::ProjectInvalidFailureUrl)
        assert_equal('project_reserved_project', ErrorType::ProjectReservedProject)
        assert_equal('project_smtp_config_invalid', ErrorType::ProjectSmtpConfigInvalid)
        assert_equal('graphql_no_query', ErrorType::GraphqlNoQuery)
        assert_equal('graphql_too_many_queries', ErrorType::GraphqlTooManyQueries)
        assert_equal('general_access_forbidden', ErrorType::GeneralAccessForbidden)
        assert_equal('general_unauthorized_scope', ErrorType::GeneralUnauthorizedScope)
        assert_equal('user_jwt_invalid', ErrorType::UserJwtInvalid)
        assert_equal('user_blocked', ErrorType::UserBlocked)
        assert_equal('user_invalid_token', ErrorType::UserInvalidToken)
        assert_equal('user_email_not_whitelisted', ErrorType::UserEmailNotWhitelisted)
        assert_equal('user_invalid_code', ErrorType::UserInvalidCode)
        assert_equal('user_ip_not_whitelisted', ErrorType::UserIpNotWhitelisted)
        assert_equal('user_invalid_credentials', ErrorType::UserInvalidCredentials)
        assert_equal('user_anonymous_console_prohibited', ErrorType::UserAnonymousConsoleProhibited)
        assert_equal('user_session_already_exists', ErrorType::UserSessionAlreadyExists)
        assert_equal('user_unauthorized', ErrorType::UserUnauthorized)
        assert_equal('user_oauth2_unauthorized', ErrorType::UserOauth2Unauthorized)
        assert_equal('team_invalid_secret', ErrorType::TeamInvalidSecret)
        assert_equal('team_invite_mismatch', ErrorType::TeamInviteMismatch)
        assert_equal('project_key_expired', ErrorType::ProjectKeyExpired)
        assert_equal('rule_verification_failed', ErrorType::RuleVerificationFailed)
        assert_equal('project_template_default_deletion', ErrorType::ProjectTemplateDefaultDeletion)
        assert_equal('general_unknown_origin', ErrorType::GeneralUnknownOrigin)
        assert_equal('storage_invalid_file', ErrorType::StorageInvalidFile)
        assert_equal('document_delete_restricted', ErrorType::DocumentDeleteRestricted)
        assert_equal('general_route_not_found', ErrorType::GeneralRouteNotFound)
        assert_equal('user_not_found', ErrorType::UserNotFound)
        assert_equal('user_session_not_found', ErrorType::UserSessionNotFound)
        assert_equal('user_identity_not_found', ErrorType::UserIdentityNotFound)
        assert_equal('team_not_found', ErrorType::TeamNotFound)
        assert_equal('team_invite_not_found', ErrorType::TeamInviteNotFound)
        assert_equal('team_membership_mismatch', ErrorType::TeamMembershipMismatch)
        assert_equal('membership_not_found', ErrorType::MembershipNotFound)
        assert_equal('avatar_set_not_found', ErrorType::AvatarSetNotFound)
        assert_equal('avatar_not_found', ErrorType::AvatarNotFound)
        assert_equal('avatar_image_not_found', ErrorType::AvatarImageNotFound)
        assert_equal('avatar_remote_url_failed', ErrorType::AvatarRemoteUrlFailed)
        assert_equal('avatar_icon_not_found', ErrorType::AvatarIconNotFound)
        assert_equal('storage_file_not_found', ErrorType::StorageFileNotFound)
        assert_equal('storage_bucket_not_found', ErrorType::StorageBucketNotFound)
        assert_equal('installation_not_found', ErrorType::InstallationNotFound)
        assert_equal('provider_repository_not_found', ErrorType::ProviderRepositoryNotFound)
        assert_equal('repository_not_found', ErrorType::RepositoryNotFound)
        assert_equal('function_not_found', ErrorType::FunctionNotFound)
        assert_equal('function_runtime_unsupported', ErrorType::FunctionRuntimeUnsupported)
        assert_equal('build_not_found', ErrorType::BuildNotFound)
        assert_equal('deployment_not_found', ErrorType::DeploymentNotFound)
        assert_equal('execution_not_found', ErrorType::ExecutionNotFound)
        assert_equal('database_not_found', ErrorType::DatabaseNotFound)
        assert_equal('collection_not_found', ErrorType::CollectionNotFound)
        assert_equal('document_not_found', ErrorType::DocumentNotFound)
        assert_equal('attribute_not_found', ErrorType::AttributeNotFound)
        assert_equal('index_not_found', ErrorType::IndexNotFound)
        assert_equal('project_not_found', ErrorType::ProjectNotFound)
        assert_equal('router_host_not_found', ErrorType::RouterHostNotFound)
        assert_equal('rule_resource_not_found', ErrorType::RuleResourceNotFound)
        assert_equal('rule_not_found', ErrorType::RuleNotFound)
        assert_equal('webhook_not_found', ErrorType::WebhookNotFound)
        assert_equal('key_not_found', ErrorType::KeyNotFound)
        assert_equal('platform_not_found', ErrorType::PlatformNotFound)
        assert_equal('variable_not_found', ErrorType::VariableNotFound)
        assert_equal('migration_not_found', ErrorType::MigrationNotFound)
        assert_equal('general_not_implemented', ErrorType::GeneralNotImplemented)
        assert_equal('user_already_exists', ErrorType::UserAlreadyExists)
        assert_equal('user_email_already_exists', ErrorType::UserEmailAlreadyExists)
        assert_equal('user_phone_already_exists', ErrorType::UserPhoneAlreadyExists)
        assert_equal('team_invite_already_exists', ErrorType::TeamInviteAlreadyExists)
        assert_equal('team_already_exists', ErrorType::TeamAlreadyExists)
        assert_equal('membership_already_confirmed', ErrorType::MembershipAlreadyConfirmed)
        assert_equal('storage_file_already_exists', ErrorType::StorageFileAlreadyExists)
        assert_equal('storage_bucket_already_exists', ErrorType::StorageBucketAlreadyExists)
        assert_equal('provider_contribution_conflict', ErrorType::ProviderContributionConflict)
        assert_equal('database_already_exists', ErrorType::DatabaseAlreadyExists)
        assert_equal('collection_already_exists', ErrorType::CollectionAlreadyExists)
        assert_equal('document_already_exists', ErrorType::DocumentAlreadyExists)
        assert_equal('document_update_conflict', ErrorType::DocumentUpdateConflict)
        assert_equal('attribute_already_exists', ErrorType::AttributeAlreadyExists)
        assert_equal('index_already_exists', ErrorType::IndexAlreadyExists)
        assert_equal('project_already_exists', ErrorType::ProjectAlreadyExists)
        assert_equal('rule_already_exists', ErrorType::RuleAlreadyExists)
        assert_equal('variable_already_exists', ErrorType::VariableAlreadyExists)
        assert_equal('migration_already_exists', ErrorType::MigrationAlreadyExists)
        assert_equal('migration_in_progress', ErrorType::MigrationInProgress)
        assert_equal('user_password_reset_required', ErrorType::UserPasswordResetRequired)
        assert_equal('project_provider_disabled', ErrorType::ProjectProviderDisabled)
        assert_equal('storage_invalid_range', ErrorType::StorageInvalidRange)
        assert_equal('user_oauth2_provider_error', ErrorType::UserOAuth2ProviderError)
        assert_equal('general_rate_limit_exceeded', ErrorType::GeneralRateLimitExceeded)
        assert_equal('general_unknown', ErrorType::GeneralUnknown)
        assert_equal('general_server_error', ErrorType::GeneralServerError)
        assert_equal('general_protocol_unsupported', ErrorType::GeneralProtocolUnsupported)
        assert_equal('general_codes_disabled', ErrorType::GeneralCodesDisabled)
        assert_equal('router_domain_not_configured', ErrorType::RouterDomainNotConfigured)
        assert_equal('general_usage_disabled', ErrorType::GeneralUsageDisabled)
        assert_equal('user_count_exceeded', ErrorType::UserCountExceeded)
        assert_equal('user_auth_method_unsupported', ErrorType::UserAuthMethodUnsupported)
        assert_equal('project_provider_unsupported', ErrorType::ProjectProviderUnsupported)
        assert_equal('general_service_disabled', ErrorType::GeneralServiceDisabled)
        assert_equal('general_smtp_disabled', ErrorType::GeneralSMTPDisabled)
        assert_equal('general_phone_disabled', ErrorType::GeneralPhoneDisabled)
    end
end
